/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$bubble-name: 'bubble';
$bubble-x: 178px;
$bubble-y: 52px;
$bubble-offset-x: -178px;
$bubble-offset-y: -52px;
$bubble-width: 34px;
$bubble-height: 51px;
$bubble-total-width: 326px;
$bubble-total-height: 150px;
$bubble-image: '../images/sprite.png';
$bubble: (178px, 52px, -178px, -52px, 34px, 51px, 326px, 150px, '../images/sprite.png', 'bubble', );
$close-name: 'close';
$close-x: 212px;
$close-y: 52px;
$close-offset-x: -212px;
$close-offset-y: -52px;
$close-width: 27px;
$close-height: 27px;
$close-total-width: 326px;
$close-total-height: 150px;
$close-image: '../images/sprite.png';
$close: (212px, 52px, -212px, -52px, 27px, 27px, 326px, 150px, '../images/sprite.png', 'close', );
$friend-name: 'friend';
$friend-x: 0px;
$friend-y: 0px;
$friend-offset-x: 0px;
$friend-offset-y: 0px;
$friend-width: 178px;
$friend-height: 150px;
$friend-total-width: 326px;
$friend-total-height: 150px;
$friend-image: '../images/sprite.png';
$friend: (0px, 0px, 0px, 0px, 178px, 150px, 326px, 150px, '../images/sprite.png', 'friend', );
$logotype-name: 'logotype';
$logotype-x: 178px;
$logotype-y: 0px;
$logotype-offset-x: -178px;
$logotype-offset-y: 0px;
$logotype-width: 148px;
$logotype-height: 52px;
$logotype-total-width: 326px;
$logotype-total-height: 150px;
$logotype-image: '../images/sprite.png';
$logotype: (178px, 0px, -178px, 0px, 148px, 52px, 326px, 150px, '../images/sprite.png', 'logotype', );
$spritesheet-width: 326px;
$spritesheet-height: 150px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($bubble, $close, $friend, $logotype, );
$spritesheet: (326px, 150px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
